Basics of Classes in Python.

Before coding any class:

- Think about which kind of data do you want to represent with your class.
- Think about the base case of every instance.
- Think about the instance variables: What is unique (identifiers) about each instance.
- Think about the methods: What operations (actions) can be performed by each instance.
- Think about the printed representation of the instance.

Instance Variables vs Class Variables: --> Variable = attribute

	- Class variables are set as part of the class definition.
	  The assignment expression of a class variable is placed outside of any method.
	  Method definitions also create class variables.
	
	- Instance variables are set inside the constructor method.
	  The assignment expressions of an instance variable is placed in the constructor method.

Interpreter Rules for looking up attributes

- When the interpreter sees an expression of the form <obj>.<varname>, it:
	
	1.- First, it checks for an instance variable or an instance method by the name it’s looking for.
	2.- If an instance variable or method by that name is not found, it checks for a class variable.
	3.- If no class variable is found, it looks for a class variable in the parent class.
	4.- If no class variable is found, the interpreter looks for a class variable in THAT class’s parent (the “grandparent” class).
	5.- This process goes on until the last ancestor is reached, at which point Python will signal an error.

	**Overriding Methods**: If a method is defined for a class, and also defined for its 
				parent class, the subclass’ method is called and not the parent’s.
				This follows the rules for looking up attributes as the interpreter
				calls the first	method that it founds.

- SUPER: Invoking the parent(super)class's Method:

	- the super() function can be used when the superclasss method is overriden in the 
	  subclass and the subclass defined method aims to extend the superclass method
	  functionality. super() returns a temporary object of the superclass that allows to call
	  the methods belonging to the superclass.

	- Implementation:
		inside the subclass definition...
			def <extended_method>(self):
				super().<method_to_be_extended>() --> passing parameters to the superclass methods depends on whether the method requires them.
				""" here add the extended functionality"""
	  
		
- Defining a class:

	- class <class_name>:


Class Methods:

- Mandatory Parameter self: 

	- The class instance must be passed as an argument to all class methods, therefore it is
	  mandatory that all class methods receive at least one argument. Self is the standard 
	  name of this argument.


- Defining the constructor method: 
	
	- The constructor is automatically called each time a 
	  new instance of the class is created, it allows to set up class attributes 
	  that will provide the newly created instance with its initial state values.
		
		- def __init__(self, parameter1, parameterN):
			# the user can define initial state values by adding parameters (or arguments)
			# to the constructor and assigning them to and instance attribute.
			self.<instance_attribute1> = parameter1
			...
			self.<instance_attributeN> = parameterN
			# initial state values can also be set to a predefined value.
			self.<predefined_instance_attribute> = <some_value>

- Calling the constructor method:
	
	- Each time the constructor is called it creates a new objecto of the class <class_name>
	  and it sets up its initial state values. This process is called instantiation.
	  Naturally, each time the constructor is called  it creates a new instance of 
	  the class <class_name> and returns it as an object than can assigned to a variable.
	
	- Implementation:
		- <instance_name> = <class_name>()


- String representation Method:

	- The string representation method is used to override the Python default implementation
	  of representing an object as a string. It is normally useful when providing more
	  information about the initial state values of an instance.

	- Implementation:
		- def __str__(self):
			return <string>


Add notes on how python looks for attributes	