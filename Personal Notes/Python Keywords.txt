Python Keywords:

An empty string is a substring of any other string.

- and: 
- as 
- assert:
	evaluates a python boolean expression, if the expression evaluates to False, raises a runtime error.

		Implementation:
			- assert <boolean_expression>
- break
- class: defines a new class.
- continue
- def: marks the definition of a function:
	Implementation:
		def func_name(arg1, arg2, ...):
- del
- elif
- else
- except: catches exceptions:
	Implementation:
		-try:
			<some_code> --> if nothing is wrong with this code except does not excute.
		 except <error:type>:
			<some_other_code>
- exec
- finally
- for:
	Implementation:
		- for <loop_var_name> in <sequence>: --> iterate through a sequence
			- for function in <function_sequence>: --> apply several functions to a piece of data
 				function(data)
- from:
	Implementation: from <module> import <class>
- global: declare a variable to be global.
	Implementation:
		- global <variable>
- if
- import: used to import a complete module.
	Implementation: import <module>
- in: can be used to check for a substring or whether an item is contained in a list and dict.
- is: checks whether two variables are pointing to the same object (aliased)	.
- lambda: used to define a lambda function
	Implementation:
		- <f_name> = lambda <arg>: <return expresion>
- nonlocal
- not: reverse a condition.
- or
- pass
- raise
- return: indicates the values that will be returned by a function. Note: interrupts the execution of the function. Procedures do not return anything.
	Implementation:
		- inside a function: return <value/expression to be returned>
- try: handling exceptions.

	Implementation:
		- try:
			<somecode> --> if this code fails <some_other code does not execute>
			<some_other_code>
		  except <error:type>:
			<except_code> --> in case <somecode> fails exepct block is executed.  
- while
- with: Python context manager
- yield
- True
- False
- Nose